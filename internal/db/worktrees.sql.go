// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: worktrees.sql

package db

import (
	"context"
	"database/sql"
)

const createWorktree = `-- name: CreateWorktree :one
INSERT INTO worktrees (
    repository_path, repository_name, thread_id, path, 
    base_branch, current_branch, status
) VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, repository_path, repository_name, thread_id, path, base_branch, current_branch, status, created_at, deleted_at
`

type CreateWorktreeParams struct {
	RepositoryPath string         `json:"repository_path"`
	RepositoryName string         `json:"repository_name"`
	ThreadID       int64          `json:"thread_id"`
	Path           string         `json:"path"`
	BaseBranch     string         `json:"base_branch"`
	CurrentBranch  sql.NullString `json:"current_branch"`
	Status         string         `json:"status"`
}

func (q *Queries) CreateWorktree(ctx context.Context, arg CreateWorktreeParams) (Worktree, error) {
	row := q.queryRow(ctx, q.createWorktreeStmt, createWorktree,
		arg.RepositoryPath,
		arg.RepositoryName,
		arg.ThreadID,
		arg.Path,
		arg.BaseBranch,
		arg.CurrentBranch,
		arg.Status,
	)
	var i Worktree
	err := row.Scan(
		&i.ID,
		&i.RepositoryPath,
		&i.RepositoryName,
		&i.ThreadID,
		&i.Path,
		&i.BaseBranch,
		&i.CurrentBranch,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteWorktree = `-- name: DeleteWorktree :exec
DELETE FROM worktrees
WHERE id = ?
`

func (q *Queries) DeleteWorktree(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteWorktreeStmt, deleteWorktree, id)
	return err
}

const getWorktree = `-- name: GetWorktree :one
SELECT id, repository_path, repository_name, thread_id, path, base_branch, current_branch, status, created_at, deleted_at FROM worktrees
WHERE id = ? LIMIT 1
`

func (q *Queries) GetWorktree(ctx context.Context, id int64) (Worktree, error) {
	row := q.queryRow(ctx, q.getWorktreeStmt, getWorktree, id)
	var i Worktree
	err := row.Scan(
		&i.ID,
		&i.RepositoryPath,
		&i.RepositoryName,
		&i.ThreadID,
		&i.Path,
		&i.BaseBranch,
		&i.CurrentBranch,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getWorktreeByThreadID = `-- name: GetWorktreeByThreadID :one
SELECT id, repository_path, repository_name, thread_id, path, base_branch, current_branch, status, created_at, deleted_at FROM worktrees
WHERE thread_id = ? LIMIT 1
`

func (q *Queries) GetWorktreeByThreadID(ctx context.Context, threadID int64) (Worktree, error) {
	row := q.queryRow(ctx, q.getWorktreeByThreadIDStmt, getWorktreeByThreadID, threadID)
	var i Worktree
	err := row.Scan(
		&i.ID,
		&i.RepositoryPath,
		&i.RepositoryName,
		&i.ThreadID,
		&i.Path,
		&i.BaseBranch,
		&i.CurrentBranch,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listActiveWorktrees = `-- name: ListActiveWorktrees :many
SELECT id, repository_path, repository_name, thread_id, path, base_branch, current_branch, status, created_at, deleted_at FROM worktrees
WHERE status = 'active'
ORDER BY created_at DESC
`

func (q *Queries) ListActiveWorktrees(ctx context.Context) ([]Worktree, error) {
	rows, err := q.query(ctx, q.listActiveWorktreesStmt, listActiveWorktrees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Worktree
	for rows.Next() {
		var i Worktree
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryPath,
			&i.RepositoryName,
			&i.ThreadID,
			&i.Path,
			&i.BaseBranch,
			&i.CurrentBranch,
			&i.Status,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOldWorktrees = `-- name: ListOldWorktrees :many
SELECT id, repository_path, repository_name, thread_id, path, base_branch, current_branch, status, created_at, deleted_at FROM worktrees
WHERE status = 'active'
AND created_at < datetime('now', ?)
ORDER BY created_at
`

func (q *Queries) ListOldWorktrees(ctx context.Context, datetime interface{}) ([]Worktree, error) {
	rows, err := q.query(ctx, q.listOldWorktreesStmt, listOldWorktrees, datetime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Worktree
	for rows.Next() {
		var i Worktree
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryPath,
			&i.RepositoryName,
			&i.ThreadID,
			&i.Path,
			&i.BaseBranch,
			&i.CurrentBranch,
			&i.Status,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorktrees = `-- name: ListWorktrees :many
SELECT id, repository_path, repository_name, thread_id, path, base_branch, current_branch, status, created_at, deleted_at FROM worktrees
ORDER BY created_at DESC
`

func (q *Queries) ListWorktrees(ctx context.Context) ([]Worktree, error) {
	rows, err := q.query(ctx, q.listWorktreesStmt, listWorktrees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Worktree
	for rows.Next() {
		var i Worktree
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryPath,
			&i.RepositoryName,
			&i.ThreadID,
			&i.Path,
			&i.BaseBranch,
			&i.CurrentBranch,
			&i.Status,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorktreesByRepositoryPath = `-- name: ListWorktreesByRepositoryPath :many
SELECT id, repository_path, repository_name, thread_id, path, base_branch, current_branch, status, created_at, deleted_at FROM worktrees
WHERE repository_path = ?
ORDER BY created_at DESC
`

func (q *Queries) ListWorktreesByRepositoryPath(ctx context.Context, repositoryPath string) ([]Worktree, error) {
	rows, err := q.query(ctx, q.listWorktreesByRepositoryPathStmt, listWorktreesByRepositoryPath, repositoryPath)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Worktree
	for rows.Next() {
		var i Worktree
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryPath,
			&i.RepositoryName,
			&i.ThreadID,
			&i.Path,
			&i.BaseBranch,
			&i.CurrentBranch,
			&i.Status,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorktreeBranch = `-- name: UpdateWorktreeBranch :exec
UPDATE worktrees
SET current_branch = ?
WHERE id = ?
`

type UpdateWorktreeBranchParams struct {
	CurrentBranch sql.NullString `json:"current_branch"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateWorktreeBranch(ctx context.Context, arg UpdateWorktreeBranchParams) error {
	_, err := q.exec(ctx, q.updateWorktreeBranchStmt, updateWorktreeBranch, arg.CurrentBranch, arg.ID)
	return err
}

const updateWorktreeStatus = `-- name: UpdateWorktreeStatus :exec
UPDATE worktrees
SET 
    status = ?,
    deleted_at = CASE WHEN ? = 'deleted' THEN CURRENT_TIMESTAMP ELSE deleted_at END
WHERE id = ?
`

type UpdateWorktreeStatusParams struct {
	Status  string      `json:"status"`
	Column2 interface{} `json:"column_2"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateWorktreeStatus(ctx context.Context, arg UpdateWorktreeStatusParams) error {
	_, err := q.exec(ctx, q.updateWorktreeStatusStmt, updateWorktreeStatus, arg.Status, arg.Column2, arg.ID)
	return err
}
