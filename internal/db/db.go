// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countActiveSessionsByThreadStmt, err = db.PrepareContext(ctx, countActiveSessionsByThread); err != nil {
		return nil, fmt.Errorf("error preparing query CountActiveSessionsByThread: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.createThreadStmt, err = db.PrepareContext(ctx, createThread); err != nil {
		return nil, fmt.Errorf("error preparing query CreateThread: %w", err)
	}
	if q.getActiveSessionByThreadStmt, err = db.PrepareContext(ctx, getActiveSessionByThread); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveSessionByThread: %w", err)
	}
	if q.getLatestSessionByThreadStmt, err = db.PrepareContext(ctx, getLatestSessionByThread); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestSessionByThread: %w", err)
	}
	if q.getSessionStmt, err = db.PrepareContext(ctx, getSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetSession: %w", err)
	}
	if q.getThreadStmt, err = db.PrepareContext(ctx, getThread); err != nil {
		return nil, fmt.Errorf("error preparing query GetThread: %w", err)
	}
	if q.getThreadByIDStmt, err = db.PrepareContext(ctx, getThreadByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetThreadByID: %w", err)
	}
	if q.listActiveSessionsStmt, err = db.PrepareContext(ctx, listActiveSessions); err != nil {
		return nil, fmt.Errorf("error preparing query ListActiveSessions: %w", err)
	}
	if q.updateSessionEndTimeStmt, err = db.PrepareContext(ctx, updateSessionEndTime); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionEndTime: %w", err)
	}
	if q.updateSessionStatusStmt, err = db.PrepareContext(ctx, updateSessionStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionStatus: %w", err)
	}
	if q.updateThreadTimestampStmt, err = db.PrepareContext(ctx, updateThreadTimestamp); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateThreadTimestamp: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countActiveSessionsByThreadStmt != nil {
		if cerr := q.countActiveSessionsByThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countActiveSessionsByThreadStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.createThreadStmt != nil {
		if cerr := q.createThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createThreadStmt: %w", cerr)
		}
	}
	if q.getActiveSessionByThreadStmt != nil {
		if cerr := q.getActiveSessionByThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveSessionByThreadStmt: %w", cerr)
		}
	}
	if q.getLatestSessionByThreadStmt != nil {
		if cerr := q.getLatestSessionByThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestSessionByThreadStmt: %w", cerr)
		}
	}
	if q.getSessionStmt != nil {
		if cerr := q.getSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionStmt: %w", cerr)
		}
	}
	if q.getThreadStmt != nil {
		if cerr := q.getThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getThreadStmt: %w", cerr)
		}
	}
	if q.getThreadByIDStmt != nil {
		if cerr := q.getThreadByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getThreadByIDStmt: %w", cerr)
		}
	}
	if q.listActiveSessionsStmt != nil {
		if cerr := q.listActiveSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActiveSessionsStmt: %w", cerr)
		}
	}
	if q.updateSessionEndTimeStmt != nil {
		if cerr := q.updateSessionEndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionEndTimeStmt: %w", cerr)
		}
	}
	if q.updateSessionStatusStmt != nil {
		if cerr := q.updateSessionStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionStatusStmt: %w", cerr)
		}
	}
	if q.updateThreadTimestampStmt != nil {
		if cerr := q.updateThreadTimestampStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateThreadTimestampStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	countActiveSessionsByThreadStmt *sql.Stmt
	createSessionStmt               *sql.Stmt
	createThreadStmt                *sql.Stmt
	getActiveSessionByThreadStmt    *sql.Stmt
	getLatestSessionByThreadStmt    *sql.Stmt
	getSessionStmt                  *sql.Stmt
	getThreadStmt                   *sql.Stmt
	getThreadByIDStmt               *sql.Stmt
	listActiveSessionsStmt          *sql.Stmt
	updateSessionEndTimeStmt        *sql.Stmt
	updateSessionStatusStmt         *sql.Stmt
	updateThreadTimestampStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		countActiveSessionsByThreadStmt: q.countActiveSessionsByThreadStmt,
		createSessionStmt:               q.createSessionStmt,
		createThreadStmt:                q.createThreadStmt,
		getActiveSessionByThreadStmt:    q.getActiveSessionByThreadStmt,
		getLatestSessionByThreadStmt:    q.getLatestSessionByThreadStmt,
		getSessionStmt:                  q.getSessionStmt,
		getThreadStmt:                   q.getThreadStmt,
		getThreadByIDStmt:               q.getThreadByIDStmt,
		listActiveSessionsStmt:          q.listActiveSessionsStmt,
		updateSessionEndTimeStmt:        q.updateSessionEndTimeStmt,
		updateSessionStatusStmt:         q.updateSessionStatusStmt,
		updateThreadTimestampStmt:       q.updateThreadTimestampStmt,
	}
}
