// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countActiveSessionsByThreadStmt, err = db.PrepareContext(ctx, countActiveSessionsByThread); err != nil {
		return nil, fmt.Errorf("error preparing query CountActiveSessionsByThread: %w", err)
	}
	if q.createRepositoryStmt, err = db.PrepareContext(ctx, createRepository); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRepository: %w", err)
	}
	if q.createSessionWithInitialPromptStmt, err = db.PrepareContext(ctx, createSessionWithInitialPrompt); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSessionWithInitialPrompt: %w", err)
	}
	if q.createThreadStmt, err = db.PrepareContext(ctx, createThread); err != nil {
		return nil, fmt.Errorf("error preparing query CreateThread: %w", err)
	}
	if q.createWorktreeStmt, err = db.PrepareContext(ctx, createWorktree); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorktree: %w", err)
	}
	if q.deleteRepositoryStmt, err = db.PrepareContext(ctx, deleteRepository); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRepository: %w", err)
	}
	if q.deleteWorktreeStmt, err = db.PrepareContext(ctx, deleteWorktree); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorktree: %w", err)
	}
	if q.getActiveSessionByThreadStmt, err = db.PrepareContext(ctx, getActiveSessionByThread); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveSessionByThread: %w", err)
	}
	if q.getLatestSessionByThreadStmt, err = db.PrepareContext(ctx, getLatestSessionByThread); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestSessionByThread: %w", err)
	}
	if q.getRepositoryStmt, err = db.PrepareContext(ctx, getRepository); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepository: %w", err)
	}
	if q.getRepositoryByChannelIDStmt, err = db.PrepareContext(ctx, getRepositoryByChannelID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepositoryByChannelID: %w", err)
	}
	if q.getRepositoryByNameStmt, err = db.PrepareContext(ctx, getRepositoryByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepositoryByName: %w", err)
	}
	if q.getSessionStmt, err = db.PrepareContext(ctx, getSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetSession: %w", err)
	}
	if q.getThreadStmt, err = db.PrepareContext(ctx, getThread); err != nil {
		return nil, fmt.Errorf("error preparing query GetThread: %w", err)
	}
	if q.getThreadByIDStmt, err = db.PrepareContext(ctx, getThreadByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetThreadByID: %w", err)
	}
	if q.getThreadByThreadTsStmt, err = db.PrepareContext(ctx, getThreadByThreadTs); err != nil {
		return nil, fmt.Errorf("error preparing query GetThreadByThreadTs: %w", err)
	}
	if q.getWorktreeStmt, err = db.PrepareContext(ctx, getWorktree); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorktree: %w", err)
	}
	if q.getWorktreeByThreadIDStmt, err = db.PrepareContext(ctx, getWorktreeByThreadID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorktreeByThreadID: %w", err)
	}
	if q.listActiveSessionsStmt, err = db.PrepareContext(ctx, listActiveSessions); err != nil {
		return nil, fmt.Errorf("error preparing query ListActiveSessions: %w", err)
	}
	if q.listActiveWorktreesStmt, err = db.PrepareContext(ctx, listActiveWorktrees); err != nil {
		return nil, fmt.Errorf("error preparing query ListActiveWorktrees: %w", err)
	}
	if q.listOldWorktreesStmt, err = db.PrepareContext(ctx, listOldWorktrees); err != nil {
		return nil, fmt.Errorf("error preparing query ListOldWorktrees: %w", err)
	}
	if q.listRepositoriesStmt, err = db.PrepareContext(ctx, listRepositories); err != nil {
		return nil, fmt.Errorf("error preparing query ListRepositories: %w", err)
	}
	if q.listRepositoriesByChannelIDStmt, err = db.PrepareContext(ctx, listRepositoriesByChannelID); err != nil {
		return nil, fmt.Errorf("error preparing query ListRepositoriesByChannelID: %w", err)
	}
	if q.listSessionsStmt, err = db.PrepareContext(ctx, listSessions); err != nil {
		return nil, fmt.Errorf("error preparing query ListSessions: %w", err)
	}
	if q.listSessionsByThreadIDStmt, err = db.PrepareContext(ctx, listSessionsByThreadID); err != nil {
		return nil, fmt.Errorf("error preparing query ListSessionsByThreadID: %w", err)
	}
	if q.listThreadsStmt, err = db.PrepareContext(ctx, listThreads); err != nil {
		return nil, fmt.Errorf("error preparing query ListThreads: %w", err)
	}
	if q.listWorktreesByRepositoryStmt, err = db.PrepareContext(ctx, listWorktreesByRepository); err != nil {
		return nil, fmt.Errorf("error preparing query ListWorktreesByRepository: %w", err)
	}
	if q.updateRepositoryStmt, err = db.PrepareContext(ctx, updateRepository); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRepository: %w", err)
	}
	if q.updateSessionEndTimeStmt, err = db.PrepareContext(ctx, updateSessionEndTime); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionEndTime: %w", err)
	}
	if q.updateSessionIDStmt, err = db.PrepareContext(ctx, updateSessionID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionID: %w", err)
	}
	if q.updateSessionModelStmt, err = db.PrepareContext(ctx, updateSessionModel); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionModel: %w", err)
	}
	if q.updateSessionOnCompleteStmt, err = db.PrepareContext(ctx, updateSessionOnComplete); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionOnComplete: %w", err)
	}
	if q.updateSessionStatusStmt, err = db.PrepareContext(ctx, updateSessionStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionStatus: %w", err)
	}
	if q.updateThreadTimestampStmt, err = db.PrepareContext(ctx, updateThreadTimestamp); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateThreadTimestamp: %w", err)
	}
	if q.updateThreadWorkingDirectoryStmt, err = db.PrepareContext(ctx, updateThreadWorkingDirectory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateThreadWorkingDirectory: %w", err)
	}
	if q.updateWorktreeBranchStmt, err = db.PrepareContext(ctx, updateWorktreeBranch); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorktreeBranch: %w", err)
	}
	if q.updateWorktreeStatusStmt, err = db.PrepareContext(ctx, updateWorktreeStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorktreeStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countActiveSessionsByThreadStmt != nil {
		if cerr := q.countActiveSessionsByThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countActiveSessionsByThreadStmt: %w", cerr)
		}
	}
	if q.createRepositoryStmt != nil {
		if cerr := q.createRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRepositoryStmt: %w", cerr)
		}
	}
	if q.createSessionWithInitialPromptStmt != nil {
		if cerr := q.createSessionWithInitialPromptStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionWithInitialPromptStmt: %w", cerr)
		}
	}
	if q.createThreadStmt != nil {
		if cerr := q.createThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createThreadStmt: %w", cerr)
		}
	}
	if q.createWorktreeStmt != nil {
		if cerr := q.createWorktreeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorktreeStmt: %w", cerr)
		}
	}
	if q.deleteRepositoryStmt != nil {
		if cerr := q.deleteRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRepositoryStmt: %w", cerr)
		}
	}
	if q.deleteWorktreeStmt != nil {
		if cerr := q.deleteWorktreeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorktreeStmt: %w", cerr)
		}
	}
	if q.getActiveSessionByThreadStmt != nil {
		if cerr := q.getActiveSessionByThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveSessionByThreadStmt: %w", cerr)
		}
	}
	if q.getLatestSessionByThreadStmt != nil {
		if cerr := q.getLatestSessionByThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestSessionByThreadStmt: %w", cerr)
		}
	}
	if q.getRepositoryStmt != nil {
		if cerr := q.getRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepositoryStmt: %w", cerr)
		}
	}
	if q.getRepositoryByChannelIDStmt != nil {
		if cerr := q.getRepositoryByChannelIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepositoryByChannelIDStmt: %w", cerr)
		}
	}
	if q.getRepositoryByNameStmt != nil {
		if cerr := q.getRepositoryByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepositoryByNameStmt: %w", cerr)
		}
	}
	if q.getSessionStmt != nil {
		if cerr := q.getSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionStmt: %w", cerr)
		}
	}
	if q.getThreadStmt != nil {
		if cerr := q.getThreadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getThreadStmt: %w", cerr)
		}
	}
	if q.getThreadByIDStmt != nil {
		if cerr := q.getThreadByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getThreadByIDStmt: %w", cerr)
		}
	}
	if q.getThreadByThreadTsStmt != nil {
		if cerr := q.getThreadByThreadTsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getThreadByThreadTsStmt: %w", cerr)
		}
	}
	if q.getWorktreeStmt != nil {
		if cerr := q.getWorktreeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorktreeStmt: %w", cerr)
		}
	}
	if q.getWorktreeByThreadIDStmt != nil {
		if cerr := q.getWorktreeByThreadIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorktreeByThreadIDStmt: %w", cerr)
		}
	}
	if q.listActiveSessionsStmt != nil {
		if cerr := q.listActiveSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActiveSessionsStmt: %w", cerr)
		}
	}
	if q.listActiveWorktreesStmt != nil {
		if cerr := q.listActiveWorktreesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActiveWorktreesStmt: %w", cerr)
		}
	}
	if q.listOldWorktreesStmt != nil {
		if cerr := q.listOldWorktreesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOldWorktreesStmt: %w", cerr)
		}
	}
	if q.listRepositoriesStmt != nil {
		if cerr := q.listRepositoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRepositoriesStmt: %w", cerr)
		}
	}
	if q.listRepositoriesByChannelIDStmt != nil {
		if cerr := q.listRepositoriesByChannelIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRepositoriesByChannelIDStmt: %w", cerr)
		}
	}
	if q.listSessionsStmt != nil {
		if cerr := q.listSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSessionsStmt: %w", cerr)
		}
	}
	if q.listSessionsByThreadIDStmt != nil {
		if cerr := q.listSessionsByThreadIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSessionsByThreadIDStmt: %w", cerr)
		}
	}
	if q.listThreadsStmt != nil {
		if cerr := q.listThreadsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listThreadsStmt: %w", cerr)
		}
	}
	if q.listWorktreesByRepositoryStmt != nil {
		if cerr := q.listWorktreesByRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWorktreesByRepositoryStmt: %w", cerr)
		}
	}
	if q.updateRepositoryStmt != nil {
		if cerr := q.updateRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRepositoryStmt: %w", cerr)
		}
	}
	if q.updateSessionEndTimeStmt != nil {
		if cerr := q.updateSessionEndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionEndTimeStmt: %w", cerr)
		}
	}
	if q.updateSessionIDStmt != nil {
		if cerr := q.updateSessionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionIDStmt: %w", cerr)
		}
	}
	if q.updateSessionModelStmt != nil {
		if cerr := q.updateSessionModelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionModelStmt: %w", cerr)
		}
	}
	if q.updateSessionOnCompleteStmt != nil {
		if cerr := q.updateSessionOnCompleteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionOnCompleteStmt: %w", cerr)
		}
	}
	if q.updateSessionStatusStmt != nil {
		if cerr := q.updateSessionStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionStatusStmt: %w", cerr)
		}
	}
	if q.updateThreadTimestampStmt != nil {
		if cerr := q.updateThreadTimestampStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateThreadTimestampStmt: %w", cerr)
		}
	}
	if q.updateThreadWorkingDirectoryStmt != nil {
		if cerr := q.updateThreadWorkingDirectoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateThreadWorkingDirectoryStmt: %w", cerr)
		}
	}
	if q.updateWorktreeBranchStmt != nil {
		if cerr := q.updateWorktreeBranchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorktreeBranchStmt: %w", cerr)
		}
	}
	if q.updateWorktreeStatusStmt != nil {
		if cerr := q.updateWorktreeStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorktreeStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	countActiveSessionsByThreadStmt    *sql.Stmt
	createRepositoryStmt               *sql.Stmt
	createSessionWithInitialPromptStmt *sql.Stmt
	createThreadStmt                   *sql.Stmt
	createWorktreeStmt                 *sql.Stmt
	deleteRepositoryStmt               *sql.Stmt
	deleteWorktreeStmt                 *sql.Stmt
	getActiveSessionByThreadStmt       *sql.Stmt
	getLatestSessionByThreadStmt       *sql.Stmt
	getRepositoryStmt                  *sql.Stmt
	getRepositoryByChannelIDStmt       *sql.Stmt
	getRepositoryByNameStmt            *sql.Stmt
	getSessionStmt                     *sql.Stmt
	getThreadStmt                      *sql.Stmt
	getThreadByIDStmt                  *sql.Stmt
	getThreadByThreadTsStmt            *sql.Stmt
	getWorktreeStmt                    *sql.Stmt
	getWorktreeByThreadIDStmt          *sql.Stmt
	listActiveSessionsStmt             *sql.Stmt
	listActiveWorktreesStmt            *sql.Stmt
	listOldWorktreesStmt               *sql.Stmt
	listRepositoriesStmt               *sql.Stmt
	listRepositoriesByChannelIDStmt    *sql.Stmt
	listSessionsStmt                   *sql.Stmt
	listSessionsByThreadIDStmt         *sql.Stmt
	listThreadsStmt                    *sql.Stmt
	listWorktreesByRepositoryStmt      *sql.Stmt
	updateRepositoryStmt               *sql.Stmt
	updateSessionEndTimeStmt           *sql.Stmt
	updateSessionIDStmt                *sql.Stmt
	updateSessionModelStmt             *sql.Stmt
	updateSessionOnCompleteStmt        *sql.Stmt
	updateSessionStatusStmt            *sql.Stmt
	updateThreadTimestampStmt          *sql.Stmt
	updateThreadWorkingDirectoryStmt   *sql.Stmt
	updateWorktreeBranchStmt           *sql.Stmt
	updateWorktreeStatusStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		countActiveSessionsByThreadStmt:    q.countActiveSessionsByThreadStmt,
		createRepositoryStmt:               q.createRepositoryStmt,
		createSessionWithInitialPromptStmt: q.createSessionWithInitialPromptStmt,
		createThreadStmt:                   q.createThreadStmt,
		createWorktreeStmt:                 q.createWorktreeStmt,
		deleteRepositoryStmt:               q.deleteRepositoryStmt,
		deleteWorktreeStmt:                 q.deleteWorktreeStmt,
		getActiveSessionByThreadStmt:       q.getActiveSessionByThreadStmt,
		getLatestSessionByThreadStmt:       q.getLatestSessionByThreadStmt,
		getRepositoryStmt:                  q.getRepositoryStmt,
		getRepositoryByChannelIDStmt:       q.getRepositoryByChannelIDStmt,
		getRepositoryByNameStmt:            q.getRepositoryByNameStmt,
		getSessionStmt:                     q.getSessionStmt,
		getThreadStmt:                      q.getThreadStmt,
		getThreadByIDStmt:                  q.getThreadByIDStmt,
		getThreadByThreadTsStmt:            q.getThreadByThreadTsStmt,
		getWorktreeStmt:                    q.getWorktreeStmt,
		getWorktreeByThreadIDStmt:          q.getWorktreeByThreadIDStmt,
		listActiveSessionsStmt:             q.listActiveSessionsStmt,
		listActiveWorktreesStmt:            q.listActiveWorktreesStmt,
		listOldWorktreesStmt:               q.listOldWorktreesStmt,
		listRepositoriesStmt:               q.listRepositoriesStmt,
		listRepositoriesByChannelIDStmt:    q.listRepositoriesByChannelIDStmt,
		listSessionsStmt:                   q.listSessionsStmt,
		listSessionsByThreadIDStmt:         q.listSessionsByThreadIDStmt,
		listThreadsStmt:                    q.listThreadsStmt,
		listWorktreesByRepositoryStmt:      q.listWorktreesByRepositoryStmt,
		updateRepositoryStmt:               q.updateRepositoryStmt,
		updateSessionEndTimeStmt:           q.updateSessionEndTimeStmt,
		updateSessionIDStmt:                q.updateSessionIDStmt,
		updateSessionModelStmt:             q.updateSessionModelStmt,
		updateSessionOnCompleteStmt:        q.updateSessionOnCompleteStmt,
		updateSessionStatusStmt:            q.updateSessionStatusStmt,
		updateThreadTimestampStmt:          q.updateThreadTimestampStmt,
		updateThreadWorkingDirectoryStmt:   q.updateThreadWorkingDirectoryStmt,
		updateWorktreeBranchStmt:           q.updateWorktreeBranchStmt,
		updateWorktreeStatusStmt:           q.updateWorktreeStatusStmt,
	}
}
