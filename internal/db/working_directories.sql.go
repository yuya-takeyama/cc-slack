// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: working_directories.sql

package db

import (
	"context"
)

const createWorkingDirectory = `-- name: CreateWorkingDirectory :one
INSERT INTO working_directories (
    channel_id, name, path
) VALUES (
    ?, ?, ?
) RETURNING id, channel_id, name, path, created_at, updated_at
`

type CreateWorkingDirectoryParams struct {
	ChannelID string `json:"channel_id"`
	Name      string `json:"name"`
	Path      string `json:"path"`
}

func (q *Queries) CreateWorkingDirectory(ctx context.Context, arg CreateWorkingDirectoryParams) (WorkingDirectory, error) {
	row := q.queryRow(ctx, q.createWorkingDirectoryStmt, createWorkingDirectory, arg.ChannelID, arg.Name, arg.Path)
	var i WorkingDirectory
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorkingDirectory = `-- name: DeleteWorkingDirectory :exec
DELETE FROM working_directories
WHERE channel_id = ? AND name = ?
`

type DeleteWorkingDirectoryParams struct {
	ChannelID string `json:"channel_id"`
	Name      string `json:"name"`
}

func (q *Queries) DeleteWorkingDirectory(ctx context.Context, arg DeleteWorkingDirectoryParams) error {
	_, err := q.exec(ctx, q.deleteWorkingDirectoryStmt, deleteWorkingDirectory, arg.ChannelID, arg.Name)
	return err
}

const getWorkingDirectoriesByChannel = `-- name: GetWorkingDirectoriesByChannel :many
SELECT id, channel_id, name, path, created_at, updated_at FROM working_directories
WHERE channel_id = ?
ORDER BY name
`

func (q *Queries) GetWorkingDirectoriesByChannel(ctx context.Context, channelID string) ([]WorkingDirectory, error) {
	rows, err := q.query(ctx, q.getWorkingDirectoriesByChannelStmt, getWorkingDirectoriesByChannel, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkingDirectory
	for rows.Next() {
		var i WorkingDirectory
		if err := rows.Scan(
			&i.ID,
			&i.ChannelID,
			&i.Name,
			&i.Path,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkingDirectory = `-- name: GetWorkingDirectory :one
SELECT id, channel_id, name, path, created_at, updated_at FROM working_directories
WHERE channel_id = ? AND name = ?
LIMIT 1
`

type GetWorkingDirectoryParams struct {
	ChannelID string `json:"channel_id"`
	Name      string `json:"name"`
}

func (q *Queries) GetWorkingDirectory(ctx context.Context, arg GetWorkingDirectoryParams) (WorkingDirectory, error) {
	row := q.queryRow(ctx, q.getWorkingDirectoryStmt, getWorkingDirectory, arg.ChannelID, arg.Name)
	var i WorkingDirectory
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWorkingDirectory = `-- name: UpdateWorkingDirectory :one
UPDATE working_directories
SET path = ?, updated_at = CURRENT_TIMESTAMP
WHERE channel_id = ? AND name = ?
RETURNING id, channel_id, name, path, created_at, updated_at
`

type UpdateWorkingDirectoryParams struct {
	Path      string `json:"path"`
	ChannelID string `json:"channel_id"`
	Name      string `json:"name"`
}

func (q *Queries) UpdateWorkingDirectory(ctx context.Context, arg UpdateWorkingDirectoryParams) (WorkingDirectory, error) {
	row := q.queryRow(ctx, q.updateWorkingDirectoryStmt, updateWorkingDirectory, arg.Path, arg.ChannelID, arg.Name)
	var i WorkingDirectory
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
