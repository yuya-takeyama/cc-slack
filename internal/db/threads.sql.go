// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: threads.sql

package db

import (
	"context"
	"database/sql"
)

const createThread = `-- name: CreateThread :one
INSERT INTO threads (
    channel_id, thread_ts, working_directory, repository_id
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, channel_id, thread_ts, working_directory, created_at, updated_at, repository_id
`

type CreateThreadParams struct {
	ChannelID        string        `json:"channel_id"`
	ThreadTs         string        `json:"thread_ts"`
	WorkingDirectory string        `json:"working_directory"`
	RepositoryID     sql.NullInt64 `json:"repository_id"`
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.queryRow(ctx, q.createThreadStmt, createThread,
		arg.ChannelID,
		arg.ThreadTs,
		arg.WorkingDirectory,
		arg.RepositoryID,
	)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.ThreadTs,
		&i.WorkingDirectory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RepositoryID,
	)
	return i, err
}

const getThread = `-- name: GetThread :one
SELECT id, channel_id, thread_ts, working_directory, created_at, updated_at, repository_id FROM threads
WHERE channel_id = ? AND thread_ts = ?
LIMIT 1
`

type GetThreadParams struct {
	ChannelID string `json:"channel_id"`
	ThreadTs  string `json:"thread_ts"`
}

func (q *Queries) GetThread(ctx context.Context, arg GetThreadParams) (Thread, error) {
	row := q.queryRow(ctx, q.getThreadStmt, getThread, arg.ChannelID, arg.ThreadTs)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.ThreadTs,
		&i.WorkingDirectory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RepositoryID,
	)
	return i, err
}

const getThreadByID = `-- name: GetThreadByID :one
SELECT id, channel_id, thread_ts, working_directory, created_at, updated_at, repository_id FROM threads
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetThreadByID(ctx context.Context, id int64) (Thread, error) {
	row := q.queryRow(ctx, q.getThreadByIDStmt, getThreadByID, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.ThreadTs,
		&i.WorkingDirectory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RepositoryID,
	)
	return i, err
}

const getThreadByThreadTs = `-- name: GetThreadByThreadTs :one
SELECT id, channel_id, thread_ts, working_directory, created_at, updated_at, repository_id FROM threads
WHERE thread_ts = ?
LIMIT 1
`

func (q *Queries) GetThreadByThreadTs(ctx context.Context, threadTs string) (Thread, error) {
	row := q.queryRow(ctx, q.getThreadByThreadTsStmt, getThreadByThreadTs, threadTs)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.ThreadTs,
		&i.WorkingDirectory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RepositoryID,
	)
	return i, err
}

const listThreads = `-- name: ListThreads :many
SELECT id, channel_id, thread_ts, working_directory, created_at, updated_at, repository_id FROM threads
ORDER BY updated_at DESC
`

func (q *Queries) ListThreads(ctx context.Context) ([]Thread, error) {
	rows, err := q.query(ctx, q.listThreadsStmt, listThreads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.ChannelID,
			&i.ThreadTs,
			&i.WorkingDirectory,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RepositoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateThreadTimestamp = `-- name: UpdateThreadTimestamp :exec
UPDATE threads
SET updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateThreadTimestamp(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.updateThreadTimestampStmt, updateThreadTimestamp, id)
	return err
}

const updateThreadWorkingDirectory = `-- name: UpdateThreadWorkingDirectory :exec
UPDATE threads
SET working_directory = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateThreadWorkingDirectoryParams struct {
	WorkingDirectory string `json:"working_directory"`
	ID               int64  `json:"id"`
}

func (q *Queries) UpdateThreadWorkingDirectory(ctx context.Context, arg UpdateThreadWorkingDirectoryParams) error {
	_, err := q.exec(ctx, q.updateThreadWorkingDirectoryStmt, updateThreadWorkingDirectory, arg.WorkingDirectory, arg.ID)
	return err
}
