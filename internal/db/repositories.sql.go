// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: repositories.sql

package db

import (
	"context"
	"database/sql"
)

const createRepository = `-- name: CreateRepository :one
INSERT INTO repositories (
    name, path, default_branch, 
    slack_channel_id, slack_username, 
    slack_icon_emoji, slack_icon_url
) VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, path, default_branch, slack_channel_id, slack_username, slack_icon_emoji, slack_icon_url, created_at, updated_at
`

type CreateRepositoryParams struct {
	Name           string         `json:"name"`
	Path           string         `json:"path"`
	DefaultBranch  sql.NullString `json:"default_branch"`
	SlackChannelID sql.NullString `json:"slack_channel_id"`
	SlackUsername  sql.NullString `json:"slack_username"`
	SlackIconEmoji sql.NullString `json:"slack_icon_emoji"`
	SlackIconUrl   sql.NullString `json:"slack_icon_url"`
}

func (q *Queries) CreateRepository(ctx context.Context, arg CreateRepositoryParams) (Repository, error) {
	row := q.queryRow(ctx, q.createRepositoryStmt, createRepository,
		arg.Name,
		arg.Path,
		arg.DefaultBranch,
		arg.SlackChannelID,
		arg.SlackUsername,
		arg.SlackIconEmoji,
		arg.SlackIconUrl,
	)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.DefaultBranch,
		&i.SlackChannelID,
		&i.SlackUsername,
		&i.SlackIconEmoji,
		&i.SlackIconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRepository = `-- name: DeleteRepository :exec
DELETE FROM repositories
WHERE id = ?
`

func (q *Queries) DeleteRepository(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteRepositoryStmt, deleteRepository, id)
	return err
}

const getRepository = `-- name: GetRepository :one
SELECT id, name, path, default_branch, slack_channel_id, slack_username, slack_icon_emoji, slack_icon_url, created_at, updated_at FROM repositories
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRepository(ctx context.Context, id int64) (Repository, error) {
	row := q.queryRow(ctx, q.getRepositoryStmt, getRepository, id)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.DefaultBranch,
		&i.SlackChannelID,
		&i.SlackUsername,
		&i.SlackIconEmoji,
		&i.SlackIconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRepositoryByChannelID = `-- name: GetRepositoryByChannelID :one
SELECT id, name, path, default_branch, slack_channel_id, slack_username, slack_icon_emoji, slack_icon_url, created_at, updated_at FROM repositories
WHERE slack_channel_id = ? LIMIT 1
`

func (q *Queries) GetRepositoryByChannelID(ctx context.Context, slackChannelID sql.NullString) (Repository, error) {
	row := q.queryRow(ctx, q.getRepositoryByChannelIDStmt, getRepositoryByChannelID, slackChannelID)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.DefaultBranch,
		&i.SlackChannelID,
		&i.SlackUsername,
		&i.SlackIconEmoji,
		&i.SlackIconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRepositoryByName = `-- name: GetRepositoryByName :one
SELECT id, name, path, default_branch, slack_channel_id, slack_username, slack_icon_emoji, slack_icon_url, created_at, updated_at FROM repositories
WHERE name = ? LIMIT 1
`

func (q *Queries) GetRepositoryByName(ctx context.Context, name string) (Repository, error) {
	row := q.queryRow(ctx, q.getRepositoryByNameStmt, getRepositoryByName, name)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.DefaultBranch,
		&i.SlackChannelID,
		&i.SlackUsername,
		&i.SlackIconEmoji,
		&i.SlackIconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRepositories = `-- name: ListRepositories :many
SELECT id, name, path, default_branch, slack_channel_id, slack_username, slack_icon_emoji, slack_icon_url, created_at, updated_at FROM repositories
ORDER BY name
`

func (q *Queries) ListRepositories(ctx context.Context) ([]Repository, error) {
	rows, err := q.query(ctx, q.listRepositoriesStmt, listRepositories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repository
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.DefaultBranch,
			&i.SlackChannelID,
			&i.SlackUsername,
			&i.SlackIconEmoji,
			&i.SlackIconUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepositoriesByChannelID = `-- name: ListRepositoriesByChannelID :many
SELECT id, name, path, default_branch, slack_channel_id, slack_username, slack_icon_emoji, slack_icon_url, created_at, updated_at FROM repositories
WHERE slack_channel_id = ?
ORDER BY name
`

func (q *Queries) ListRepositoriesByChannelID(ctx context.Context, slackChannelID sql.NullString) ([]Repository, error) {
	rows, err := q.query(ctx, q.listRepositoriesByChannelIDStmt, listRepositoriesByChannelID, slackChannelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repository
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.DefaultBranch,
			&i.SlackChannelID,
			&i.SlackUsername,
			&i.SlackIconEmoji,
			&i.SlackIconUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRepository = `-- name: UpdateRepository :one
UPDATE repositories
SET
    name = ?,
    path = ?,
    default_branch = ?,
    slack_channel_id = ?,
    slack_username = ?,
    slack_icon_emoji = ?,
    slack_icon_url = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, path, default_branch, slack_channel_id, slack_username, slack_icon_emoji, slack_icon_url, created_at, updated_at
`

type UpdateRepositoryParams struct {
	Name           string         `json:"name"`
	Path           string         `json:"path"`
	DefaultBranch  sql.NullString `json:"default_branch"`
	SlackChannelID sql.NullString `json:"slack_channel_id"`
	SlackUsername  sql.NullString `json:"slack_username"`
	SlackIconEmoji sql.NullString `json:"slack_icon_emoji"`
	SlackIconUrl   sql.NullString `json:"slack_icon_url"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateRepository(ctx context.Context, arg UpdateRepositoryParams) (Repository, error) {
	row := q.queryRow(ctx, q.updateRepositoryStmt, updateRepository,
		arg.Name,
		arg.Path,
		arg.DefaultBranch,
		arg.SlackChannelID,
		arg.SlackUsername,
		arg.SlackIconEmoji,
		arg.SlackIconUrl,
		arg.ID,
	)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.DefaultBranch,
		&i.SlackChannelID,
		&i.SlackUsername,
		&i.SlackIconEmoji,
		&i.SlackIconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
